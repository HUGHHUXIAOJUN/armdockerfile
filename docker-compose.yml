services:
  nginx:
    image: nginx:latest  # 使用最新版本以支持 HTTP/3
    container_name: web-nginx
    ports:
      - "80:80"
      - "443:443/tcp"
      - "443:443/udp"  # HTTP/3 需要 UDP 端口
    volumes:
      - ./html:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl  # SSL 证书目录
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - php
    networks:
      - app-network
    restart: unless-stopped

   
  php:
    build: ./php  # 使用自定义Dockerfile
    container_name: web-php
    volumes:
      - ./html:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/conf.d/custom.ini
      - ./logs/php:/var/log/php
    environment:
      - PHP_MEMORY_LIMIT=128M
      - UPLOAD_MAX_FILESIZE=50M
    user: "www-data:www-data"
    networks:
      - app-network
    restart: unless-stopped

  mysql:
    image: arm64v8/mariadb:10.11
    container_name: web-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=typecho
      - MYSQL_USER=typecho
      - MYSQL_PASSWORD=typecho123
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d  # 确保这行存在
    networks:
      - app-network
    restart: unless-stopped
  # Node.js 服务
  nodejs:
    image: node:18-alpine
    container_name: web-nodejs
    volumes:
      - ./node:/app
      - ./logs/node:/var/log/node
    working_dir: /app
    environment:
      - NODE_ENV=production
      - PORT=3000
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "npm install && npm start"
networks:
  app-network:
    driver: bridge

volumes:
  mysql_data: